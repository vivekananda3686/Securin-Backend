const request = require("supertest");
const app = require("../server"); // Ensure this points to your Express app

describe("CVE API Endpoints", () => {
  
  let cveId = "CVE-2025-0001";

  // Test getting all CVEs
  it("should fetch all CVEs", async () => {
    const res = await request(app).get("/api/cves");
    expect(res.statusCode).toEqual(200);
    expect(Array.isArray(res.body)).toBe(true);
  });

  // Test adding a new CVE
  it("should create a new CVE", async () => {
    const res = await request(app)
      .post("/api/cves")
      .send({
        id: cveId,
        lastModified: "2025-02-27T10:00:00Z",
        baseSeverity: "MEDIUM",
        cvssData: {
          version: "2.0",
          exploitabilityScore: 4.0,
          impactScore: 6.5,
        },
      });
    expect(res.statusCode).toEqual(201);
    expect(res.body).toHaveProperty("id", cveId);
  });

  // Test fetching a CVE by ID
  it("should fetch a specific CVE by ID", async () => {
    const res = await request(app).get(`/api/cves/${cveId}`);
    expect(res.statusCode).toEqual(200);
    expect(res.body).toHaveProperty("id", cveId);
  });

  // Test updating a CVE
  it("should update an existing CVE", async () => {
    const res = await request(app)
      .put(`/api/cves/${cveId}`)
      .send({ baseSeverity: "HIGH" });
    expect(res.statusCode).toEqual(200);
  });

  // Test deleting a CVE
  it("should delete a CVE", async () => {
    const res = await request(app).delete(`/api/cves/${cveId}`);
    expect(res.statusCode).toEqual(200);
  });

  // Test fetching a non-existing CVE
  it("should return 404 for non-existing CVE", async () => {
    const res = await request(app).get("/api/cves/CVE-0000-0000");
    expect(res.statusCode).toEqual(404);
  });

});
