import express from 'express';
import axios from 'axios';
import Cve from '../models/cveModel.js';

const router = express.Router();

// Fetch CVE Data from NVD API and store it in MongoDB
router.get('/fetch', async (req, res) => {
    try {
        const { data } = await axios.get('https://services.nvd.nist.gov/rest/json/cves/2.0');
        
        for (let cveItem of data.vulnerabilities) {
            const cve = cveItem.cve;
            await Cve.findOneAndUpdate(
                { id: cve.id },
                {
                    id: cve.id,
                    published: cve.published,
                    lastModified: cve.lastModified,
                    description: cve.descriptions[0]?.value || 'No description',
                    severity: cve.metrics?.cvssMetricV2?.baseSeverity || 'Unknown',
                    cvssScore: cve.metrics?.cvssMetricV2?.cvssData?.baseScore || 0,
                },
                { upsert: true }
            );
        }

        res.json({ message: 'CVE Data Fetched and Stored Successfully' });
    } catch (error) {
        res.status(500).json({ message: 'Error fetching data', error: error.message });
    }
});

// Get a specific CVE by ID
router.get('/:id', async (req, res) => {
    try {
        console.log(`Fetching CVE with ID: ${req.params.id}`);
        const cve = await Cve.findOne({ id: req.params.id });

        if (!cve) {
            console.log(`CVE Not Found: ${req.params.id}`);
            return res.status(404).json({ message: 'CVE not found' });
        }

        console.log(`CVE Found:`, cve);
        res.json(cve);
    } catch (error) {
        console.error(`Server Error: ${error.message}`);
        res.status(500).json({ message: 'Server error', error: error.message });
    }
});



// Get all CVEs from MongoDB
router.get('/', async (req, res) => {
    const cves = await Cve.find();
    res.json(cves);
});



export default router;
